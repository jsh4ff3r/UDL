{"ast":null,"code":"import { ContinousBaseGesture } from './gesture';\nconst changeEventCalculator = function () {\n  const _f = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        rotationChange: current.rotation\n      };\n    } else {\n      changePayload = {\n        rotationChange: current.rotation - previous.rotation\n      };\n    }\n    return Object.assign({}, current, changePayload);\n  };\n  _f._closure = {};\n  _f.asString = \"function changeEventCalculator(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}\";\n  _f.__workletHash = 1266182141109;\n  _f.__location = \"C:\\\\Users\\\\jsh4f\\\\OneDrive\\\\Documents\\\\GitHub\\\\UDL\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\rotationGesture.js (3:0)\";\n  return _f;\n}();\nexport class RotationGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    this.handlerName = 'RotationGestureHandler';\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","_f","current","previous","changePayload","undefined","rotationChange","rotation","Object","assign","_closure","asString","__workletHash","__location","RotationGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["C:\\Users\\jsh4f\\OneDrive\\Documents\\GitHub\\UDL\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,WAArC;AAAA,MAQSC,qBAAT;EAAA,MAAAC,EAAA,YAAAA,CACEC,OADF,EAEEC,QAFF,EAGE;IAEA,IAAIC,aAAJ;IACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BD,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK;MADV,CAAhB;IAGD,CAJD,MAIO;MACLH,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;MAD9B,CAAhB;IAGD;IAED,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAL,EAAiBE,aAAA;EACzB;EAAAH,EAAA,CAAAS,QAAA;EAAAT,EAAA,CAAAU,QAAA;EAAAV,EAAA,CAAAW,aAAA;EAAAX,EAAA,CAAAY,UAAA;EAAA,OAAAZ,EAAA;AAAA;AAED,OAAO,MAAMa,eAAN,SAA8Bf,oBAA9B,CAGL;EACAgB,WAAWA,CAAA,EAAG;IACZ;IAEA,KAAKC,WAAL,GAAmB,wBAAnB;EACD;EAEDC,QAAQA,CACNC,QADM,EAMN;IAEA,KAAKC,QAAL,CAAcnB,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMiB,QAAN,CAAeC,QAAf,CAAP;EACD;AAjBD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}