{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"];\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from '../../State';\nimport { PointerType, TouchEventType, EventTypes } from '../interfaces';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerEventManager from '../tools/PointerEventManager';\nimport PointerTracker from '../tools/PointerTracker';\nimport TouchEventManager from '../tools/TouchEventManager';\nimport { isPointerInBounds } from '../utils';\nexport default class GestureHandler {\n  constructor() {\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"currentState\", State.UNDETERMINED);\n    _defineProperty(this, \"shouldCancellWhenOutside\", false);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"enabled\", false);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"config\", {\n      enabled: false\n    });\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"eventManagers\", []);\n    _defineProperty(this, \"tracker\", new PointerTracker());\n    _defineProperty(this, \"activationIndex\", 0);\n    _defineProperty(this, \"awaiting\", false);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"shouldResetProgress\", false);\n    _defineProperty(this, \"pointerType\", PointerType.NONE);\n    _defineProperty(this, \"sendEvent\", (newState, oldState) => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const resultEvent = this.transformEventData(newState, oldState);\n      if (this.lastSentState !== newState) {\n        this.lastSentState = newState;\n        invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n      }\n      if (this.currentState === State.ACTIVE) {\n        resultEvent.nativeEvent.oldState = undefined;\n        invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n      }\n    });\n    this.hasCustomActivationCriteria = false;\n  }\n  init(ref, propsRef) {\n    this.propsRef = propsRef;\n    this.ref = ref;\n    this.currentState = State.UNDETERMINED;\n    this.setView();\n    this.addEventManager(new PointerEventManager(this.view));\n    this.addEventManager(new TouchEventManager(this.view));\n  }\n  setView() {\n    if (!this.ref) {\n      throw new Error(`Cannot find HTML Element for handler ${this.handlerTag}`);\n    }\n    this.view = findNodeHandle(this.ref);\n    this.view.style['touchAction'] = 'none';\n    this.view.style['WebkitTouchCallout'] = 'none';\n    if (!this.config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = this.config.userSelect;\n      this.view.style['userSelect'] = this.config.userSelect;\n    }\n  }\n  addEventManager(manager) {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerOut(this.onPointerOut.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setListeners();\n    this.eventManagers.push(manager);\n  }\n  onCancel() {}\n  onReset() {}\n  resetProgress() {}\n  reset() {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.eventManagers.forEach(manager => manager.resetManager());\n    this.currentState = State.UNDETERMINED;\n  }\n  moveToState(newState, sendIfDisabled) {\n    if (this.currentState === newState) {\n      return;\n    }\n    const oldState = this.currentState;\n    this.currentState = newState;\n    if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n      this.cancelTouches();\n    }\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n    this.onStateChange(newState, oldState);\n  }\n  onStateChange(_newState, _oldState) {}\n  begin() {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n  fail(sendIfDisabled) {\n    if (this.currentState === State.ACTIVE || this.currentState === State.BEGAN) {\n      this.moveToState(State.FAILED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n    this.resetProgress();\n  }\n  cancel(sendIfDisabled) {\n    if (this.currentState === State.ACTIVE || this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n      this.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n  }\n  activate(_force = false) {\n    if (this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n      this.moveToState(State.ACTIVE);\n      this.view.style.cursor = 'grab';\n    }\n  }\n  end() {\n    if (this.currentState === State.BEGAN || this.currentState === State.ACTIVE) {\n      this.moveToState(State.END);\n      this.view.style.cursor = 'auto';\n    }\n    this.resetProgress();\n  }\n  isAwaiting() {\n    return this.awaiting;\n  }\n  setAwaiting(value) {\n    this.awaiting = value;\n  }\n  isActive() {\n    return this.active;\n  }\n  setActive(value) {\n    this.active = value;\n  }\n  getShouldResetProgress() {\n    return this.shouldResetProgress;\n  }\n  setShouldResetProgress(value) {\n    this.shouldResetProgress = value;\n  }\n  getActivationIndex() {\n    return this.activationIndex;\n  }\n  setActivationIndex(value) {\n    this.activationIndex = value;\n  }\n  shouldWaitForHandlerFailure(handler) {\n    if (handler === this) {\n      return false;\n    }\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(this, handler);\n  }\n  shouldRequireToWaitForFailure(handler) {\n    if (handler === this) {\n      return false;\n    }\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n  }\n  shouldRecognizeSimultaneously(handler) {\n    if (handler === this) {\n      return true;\n    }\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(this, handler);\n  }\n  shouldBeCancelledByOther(handler) {\n    if (handler === this) {\n      return false;\n    }\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this, handler);\n  }\n  onPointerDown(event) {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerAdd(event) {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerUp(event) {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerRemove(event) {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerMove(event) {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerOut(event) {\n    if (this.shouldCancellWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerEnter(event) {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  onPointerCancel(event) {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n    this.cancel();\n    this.reset();\n  }\n  onPointerOutOfBounds(event) {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  tryToSendMoveEvent(out) {\n    if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n  sendTouchEvent(event) {\n    if (!this.enabled) {\n      return;\n    }\n    const {\n      onGestureHandlerEvent\n    } = this.propsRef.current;\n    const touchEvent = this.transformTouchEvent(event);\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n  transformEventData(newState, oldState) {\n    return {\n      nativeEvent: Object.assign({\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: isPointerInBounds(this.view, {\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY()\n        })\n      }, this.transformNativeEvent(), {\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: newState !== oldState ? oldState : undefined\n      }),\n      timeStamp: Date.now()\n    };\n  }\n  transformTouchEvent(event) {\n    var _event$touchEventType;\n    const rect = this.view.getBoundingClientRect();\n    const all = [];\n    const changed = [];\n    const trackerData = this.tracker.getData();\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n    trackerData.forEach((element, key) => {\n      const id = this.tracker.getMappedTouchEventId(key);\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY\n      });\n    });\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.left,\n        y: event.y - rect.top,\n        absoluteX: event.x,\n        absoluteY: event.y\n      });\n    } else {\n      trackerData.forEach((element, key) => {\n        const id = this.tracker.getMappedTouchEventId(key);\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n    }\n    let eventType = TouchEventType.UNDETERMINED;\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n    let numberOfTouches = all.length;\n    if (event.eventType === EventTypes.UP || event.eventType === EventTypes.ADDITIONAL_POINTER_UP) {\n      --numberOfTouches;\n    }\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches\n      },\n      timeStamp: Date.now()\n    };\n  }\n  cancelTouches() {\n    const rect = this.view.getBoundingClientRect();\n    const all = [];\n    const changed = [];\n    const trackerData = this.tracker.getData();\n    if (trackerData.size === 0) {\n      return;\n    }\n    trackerData.forEach((element, key) => {\n      const id = this.tracker.getMappedTouchEventId(key);\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY\n      });\n      changed.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY\n      });\n    });\n    const cancelEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length\n      },\n      timeStamp: Date.now()\n    };\n    const {\n      onGestureHandlerEvent\n    } = this.propsRef.current;\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n  transformNativeEvent() {\n    return {};\n  }\n  updateGestureConfig(_ref) {\n    let {\n        enabled = true\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    this.config = Object.assign({\n      enabled: enabled\n    }, props);\n    this.enabled = enabled;\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n    this.validateHitSlops();\n    if (this.enabled) {\n      return;\n    }\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n  checkCustomActivationCriteria(criterias) {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n  validateHitSlops() {\n    if (!this.config.hitSlop) {\n      return;\n    }\n    if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n      throw new Error('HitSlop Error: Cannot define left, right and width at the same time');\n    }\n    if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n      throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');\n    }\n    if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n      throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');\n    }\n    if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n      throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');\n    }\n  }\n  checkHitSlop() {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n    const width = this.view.getBoundingClientRect().width;\n    const height = this.view.getBoundingClientRect().height;\n    let left = 0;\n    let top = 0;\n    let right = width;\n    let bottom = height;\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n    const rect = this.view.getBoundingClientRect();\n    const offsetX = this.tracker.getLastX() - rect.left;\n    const offsetY = this.tracker.getLastY() - rect.top;\n    if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n      return true;\n    }\n    return false;\n  }\n  isPointerInBounds({\n    x,\n    y\n  }) {\n    const rect = this.view.getBoundingClientRect();\n    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n  }\n  resetConfig() {}\n  getTag() {\n    return this.handlerTag;\n  }\n  setTag(tag) {\n    this.handlerTag = tag;\n  }\n  getConfig() {\n    return this.config;\n  }\n  getShouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n  getView() {\n    return this.view;\n  }\n  getEventManagers() {\n    return this.eventManagers;\n  }\n  getTracker() {\n    return this.tracker;\n  }\n  getTrackedPointersID() {\n    return this.tracker.getTrackedPointersID();\n  }\n  getState() {\n    return this.currentState;\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n  isFinished() {\n    return this.currentState === State.END || this.currentState === State.FAILED || this.currentState === State.CANCELLED;\n  }\n  setShouldCancelWhenOutside(shouldCancel) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n  getShouldCancelWhenOutside() {\n    return this.shouldCancellWhenOutside;\n  }\n  getPointerType() {\n    return this.pointerType;\n  }\n}\nfunction invokeNullableMethod(method, event) {\n  if (!method) {\n    return;\n  }\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n  const {\n    argMapping\n  } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n    const nativeValue = event.nativeEvent[key];\n    if (value !== null && value !== void 0 && value.setValue) {\n      value.setValue(nativeValue);\n    } else {\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n  return;\n}","map":{"version":3,"names":["State","PointerType","TouchEventType","EventTypes","GestureHandlerOrchestrator","InteractionManager","PointerEventManager","PointerTracker","TouchEventManager","isPointerInBounds","GestureHandler","constructor","_defineProperty","UNDETERMINED","enabled","NONE","newState","oldState","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","resultEvent","transformEventData","lastSentState","invokeNullableMethod","currentState","ACTIVE","nativeEvent","undefined","hasCustomActivationCriteria","init","ref","setView","addEventManager","view","Error","handlerTag","findNodeHandle","style","config","userSelect","manager","setOnPointerDown","onPointerDown","bind","setOnPointerAdd","onPointerAdd","setOnPointerUp","onPointerUp","setOnPointerRemove","onPointerRemove","setOnPointerMove","onPointerMove","setOnPointerEnter","onPointerEnter","setOnPointerOut","onPointerOut","setOnPointerCancel","onPointerCancel","setOnPointerOutOfBounds","onPointerOutOfBounds","setListeners","eventManagers","push","onCancel","onReset","resetProgress","reset","tracker","resetTracker","forEach","resetManager","moveToState","sendIfDisabled","getTrackedPointersCount","needsPointerData","isFinished","cancelTouches","getInstance","onHandlerStateChange","onStateChange","_newState","_oldState","begin","checkHitSlop","BEGAN","fail","FAILED","cursor","cancel","CANCELLED","activate","_force","end","END","isAwaiting","awaiting","setAwaiting","value","isActive","active","setActive","getShouldResetProgress","shouldResetProgress","setShouldResetProgress","getActivationIndex","activationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","shouldRequireToWaitForFailure","shouldRequireHandlerToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","shouldHandlerBeCancelledBy","event","recordHandlerIfNotPresent","pointerType","TOUCH","cancelMouseAndPenGestures","sendTouchEvent","tryToSendMoveEvent","shouldCancellWhenOutside","out","sendEvent","touchEvent","transformTouchEvent","Object","assign","numberOfPointers","state","pointerInside","x","getLastAvgX","y","getLastAvgY","transformNativeEvent","target","timeStamp","Date","now","_event$touchEventType","rect","getBoundingClientRect","all","changed","trackerData","getData","size","has","pointerId","element","key","id","getMappedTouchEventId","lastX","left","lastY","top","absoluteX","absoluteY","eventType","CANCEL","DOWN","ADDITIONAL_POINTER_DOWN","UP","ADDITIONAL_POINTER_UP","MOVE","numberOfTouches","length","touchEventType","changedTouches","allTouches","cancelEvent","updateGestureConfig","_ref","props","_objectWithoutPropertiesLoose","_excluded","shouldCancelWhenOutside","setShouldCancelWhenOutside","validateHitSlops","removeHandlerFromOrchestrator","checkCustomActivationCriteria","criterias","indexOf","hitSlop","right","width","height","bottom","horizontal","vertical","offsetX","getLastX","offsetY","getLastY","resetConfig","getTag","setTag","tag","getConfig","getShouldEnableGestureOnSetup","getView","getEventManagers","getTracker","getTrackedPointersID","getState","isEnabled","shouldCancel","getShouldCancelWhenOutside","getPointerType","method","__getHandler","argMapping","__nodeConfig","Array","isArray","index","entries","nativeValue","setValue"],"sources":["C:\\Users\\jsh4f\\OneDrive\\Documents\\GitHub\\UDL\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\handlers\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  PointerType,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerEventManager from '../tools/PointerEventManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport TouchEventManager from '../tools/TouchEventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default abstract class GestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancellWhenOutside = false;\n  protected hasCustomActivationCriteria: boolean;\n  protected enabled = false;\n\n  private ref!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n  protected view!: HTMLElement;\n\n  protected eventManagers: EventManager[] = [];\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.NONE;\n\n  public constructor() {\n    this.hasCustomActivationCriteria = false;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(ref: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.setView();\n    this.addEventManager(new PointerEventManager(this.view));\n    this.addEventManager(new TouchEventManager(this.view));\n  }\n\n  private setView() {\n    if (!this.ref) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${this.handlerTag}`\n      );\n    }\n\n    this.view = findNodeHandle(this.ref) as unknown as HTMLElement;\n    this.view.style['touchAction'] = 'none';\n    //@ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = 'none';\n\n    if (!this.config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = this.config.userSelect;\n      this.view.style['userSelect'] = this.config.userSelect;\n    }\n  }\n\n  private addEventManager(manager: EventManager): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerOut(this.onPointerOut.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setListeners();\n\n    this.eventManagers.push(manager);\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.eventManagers.forEach((manager: EventManager) =>\n      manager.resetManager()\n    );\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      this.isFinished()\n    ) {\n      this.cancelTouches();\n    }\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.FAILED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  public activate(_force = false) {\n    if (\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.ACTIVE);\n      this.view.style.cursor = 'grab';\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      this.moveToState(State.END);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOut(event: AdaptedEvent): void {\n    if (this.shouldCancellWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n\n    this.cancel();\n    this.reset();\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  private tryToSendMoveEvent(out: boolean): void {\n    if (\n      this.enabled &&\n      this.active &&\n      (!out || (out && !this.shouldCancellWhenOutside))\n    ) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined =\n      this.transformTouchEvent(event);\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange }: PropsRef =\n      this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: isPointerInBounds(this.view, {\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY(),\n        }),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: newState !== oldState ? oldState : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.left,\n        y: event.y - rect.top,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n\n      changed.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent() {\n    return {};\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const width = this.view.getBoundingClientRect().width;\n    const height = this.view.getBoundingClientRect().height;\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n    const offsetX: number = this.tracker.getLastX() - rect.left;\n    const offsetY: number = this.tracker.getLastY() - rect.top;\n\n    if (\n      offsetX >= left &&\n      offsetX <= right &&\n      offsetY >= top &&\n      offsetY <= bottom\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  protected resetConfig(): void {}\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  protected getConfig() {\n    return this.config;\n  }\n\n  public getShouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  public getView(): HTMLElement {\n    return this.view;\n  }\n\n  public getEventManagers(): EventManager[] {\n    return this.eventManagers;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  private isFinished(): boolean {\n    return (\n      this.currentState === State.END ||\n      this.currentState === State.FAILED ||\n      this.currentState === State.CANCELLED\n    );\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancellWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      //Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      //RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}