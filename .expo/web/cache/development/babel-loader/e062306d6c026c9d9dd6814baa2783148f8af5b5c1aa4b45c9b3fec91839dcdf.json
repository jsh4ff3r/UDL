{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { ContinousBaseGesture } from './gesture';\nconst changeEventCalculator = function () {\n  const _f = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        forceChange: current.force\n      };\n    } else {\n      changePayload = {\n        forceChange: current.force - previous.force\n      };\n    }\n    return Object.assign({}, current, changePayload);\n  };\n  _f._closure = {};\n  _f.asString = \"function changeEventCalculator(current,previous){let changePayload;if(previous===undefined){changePayload={forceChange:current.force};}else{changePayload={forceChange:current.force-previous.force};}return{...current,...changePayload};}\";\n  _f.__workletHash = 2192363871004;\n  _f.__location = \"C:\\\\Users\\\\jsh4f\\\\OneDrive\\\\Documents\\\\GitHub\\\\UDL\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\forceTouchGesture.js (5:0)\";\n  return _f;\n}();\nexport class ForceTouchGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    _defineProperty(this, \"config\", {});\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n  minForce(force) {\n    this.config.minForce = force;\n    return this;\n  }\n  maxForce(force) {\n    this.config.maxForce = force;\n    return this;\n  }\n  feedbackOnActivation(value) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","_f","current","previous","changePayload","undefined","forceChange","force","Object","assign","_closure","asString","__workletHash","__location","ForceTouchGesture","constructor","_defineProperty","handlerName","minForce","config","maxForce","feedbackOnActivation","value","onChange","callback","handlers"],"sources":["C:\\Users\\jsh4f\\OneDrive\\Documents\\GitHub\\UDL\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  ForceTouchGestureConfig,\n  ForceTouchGestureHandlerEventPayload,\n} from '../ForceTouchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"],"mappings":";;;;;;;;;;;;;AAAA,SAA4BA,oBAA5B,QAAwD,WAAxD;AAAA,MAWSC,qBAAT;EAAA,MAAAC,EAAA,YAAAA,CACEC,OADF,EAEEC,QAFF,EAGE;IAEA,IAAIC,aAAJ;IACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BD,aAAa,GAAG;QACdE,WAAW,EAAEJ,OAAO,CAACK;MADP,CAAhB;IAGD,CAJD,MAIO;MACLH,aAAa,GAAG;QACdE,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;MADxB,CAAhB;IAGD;IAED,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAL,EAAiBE,aAAA;EACzB;EAAAH,EAAA,CAAAS,QAAA;EAAAT,EAAA,CAAAU,QAAA;EAAAV,EAAA,CAAAW,aAAA;EAAAX,EAAA,CAAAY,UAAA;EAAA,OAAAZ,EAAA;AAAA;AAED,OAAO,MAAMa,iBAAN,SAAgCf,oBAAhC,CAGL;EAGAgB,WAAWA,CAAA,EAAG;IACZ;IADYC,eAAA,iBAF+C,EAE/C;IAGZ,KAAKC,WAAL,GAAmB,0BAAnB;EACD;EAEDC,QAAQA,CAACX,KAAD,EAAgB;IACtB,KAAKY,MAAL,CAAYD,QAAZ,GAAuBX,KAAvB;IACA,OAAO,IAAP;EACD;EAEDa,QAAQA,CAACb,KAAD,EAAgB;IACtB,KAAKY,MAAL,CAAYC,QAAZ,GAAuBb,KAAvB;IACA,OAAO,IAAP;EACD;EAEDc,oBAAoBA,CAACC,KAAD,EAAiB;IACnC,KAAKH,MAAL,CAAYE,oBAAZ,GAAmCC,KAAnC;IACA,OAAO,IAAP;EACD;EAEDC,QAAQA,CACNC,QADM,EASN;IAEA,KAAKC,QAAL,CAAczB,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMuB,QAAN,CAAeC,QAAf,CAAP;EACD;AArCD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}